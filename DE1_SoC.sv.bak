module DE1_SoC (HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, KEY, LEDR, SW);
 output logic [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;
 output logic [9:0] LEDR;
 input logic [3:0] KEY;
 input logic [9:0] SW;
 
 returnProcessing RP (.U(SW[9]), .P(SW[8]), .C(SW[7]), .mark(SW[0]), .discounted(LEDR[0]), .stolen(LEDR[1]));
 
 assign HEX0 = 7'b0010000;
 assign HEX1 = 7'b0101011;
 assign HEX2 = 7'b1111001;
 assign HEX3 = 7'b0100001;
 assign HEX4 = 7'b0100001;
 assign HEX5 = 7'b0001000;
 
endmodule

module DE1_SoC_testbench();
  logic [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;
  logic [9:0] LEDR;
  logic [3:0] KEY;
  logic [9:0] SW;
  
  DE1_SoC dut (.HEX0, .HEX1, .HEX2, .HEX3, .HEX4, .HEX5, .KEY, .LEDR, .SW);
	  
  integer i;
  initial begin
  SW[1] = 1'b0;
  SW[2] = 1'b0;
  SW[3] = 1'b0;
  SW[4] = 1'b0;
  SW[5] = 1'b0;
  SW[6] = 1'b0;
  
  for (i=0; i<2**9; i++) begin
   {SW[9], SW[8], SW[7], SW[0]} = i; #10;
  end
 end
endmodule 
